<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
    body {
      text-align: center;
      font-family: Arial, sans-serif;
    }

    #controls {
      margin-bottom: 10px;
    }

    canvas {
      border: 1px solid #000;
      margin-top: 10px;
    }

    .image-container {
      display: flex;
      justify-content: center;
      margin-bottom: 20px;
    }

    .image-container img {
      margin-right: 10px;
      cursor: pointer;
      width: 100px;
    }

    .color-box {
      display: inline-block;
      width: 30px;
      height: 30px;
      margin: 5px;
      cursor: pointer;
      border: 1px solid #000;
    }

    #colorPicker {
      margin-left: 10px;
    }
  </style>
  <title>Kids Painting Tool</title>
</head>
<body>
  <div class="image-container">
    <img src="images/animal.png" alt="Animal" id="image1">
    <img src="images/Alpaca.png" alt="Alpaca" id="image2">
    <!-- Add more images as needed -->
  </div>

  <div id="controls">
    <div id="colorBoxes">
      <div class="color-box" style="background-color: red;" data-color="red"></div>
      <div class="color-box" style="background-color: green;" data-color="green"></div>
      <div class="color-box" style="background-color: blue;" data-color="blue"></div>
      <div class="color-box" style="background-color: yellow;" data-color="yellow"></div>
      <div class="color-box" style="background-color: black;" data-color="black"></div>
      <div class="color-box" style="background-color: white;" data-color="white" id="eraser"></div>
    </div>

    <label for="colorPicker">Custom color:</label>
    <input type="color" id="colorPicker">

    <label for="brushSize">Brush size:</label>
    <input type="range" id="brushSize" min="1" max="50" value="5">

    <button id="clearCanvas">Clear Canvas</button>
    <button id="saveCanvas">Save Artwork</button>
    <button id="setBgColor">Set Background Color</button>
    <button id="undo">Undo</button>
    <button id="redo">Redo</button>
  </div>

  <canvas id="paintCanvas" width="1000" height="700"></canvas>

  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const canvas = document.getElementById('paintCanvas');
      const context = canvas.getContext('2d');
      const colorPicker = document.getElementById('colorPicker');
      const brushSizeInput = document.getElementById('brushSize');
      const clearCanvasBtn = document.getElementById('clearCanvas');
      const saveCanvasBtn = document.getElementById('saveCanvas');
      const setBgColorBtn = document.getElementById('setBgColor');
      const undoBtn = document.getElementById('undo');
      const redoBtn = document.getElementById('redo');
      const colorBoxes = document.querySelectorAll('.color-box');
      const image1 = document.getElementById('image1');
      const image2 = document.getElementById('image2');
      let currentColor = '#000';
      let painting = false;
      let history = [];
      let redoHistory = [];

      function saveState() {
        history.push(canvas.toDataURL());
        redoHistory = [];
      }

      function startPosition(e) {
        painting = true;
        draw(e);
      }

      function endPosition() {
        painting = false;
        context.beginPath();
        saveState();
      }

      function draw(e) {
        if (!painting) return;

        context.lineWidth = brushSizeInput.value;
        context.lineCap = 'round';
        context.strokeStyle = currentColor;

        context.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
        context.stroke();
        context.beginPath();
        context.moveTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
      }

      function clearCanvas() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        saveState();
      }

      function saveCanvas() {
        const image = canvas.toDataURL();
        const link = document.createElement('a');
        link.href = image;
        link.download = 'artwork.png';
        link.click();
      }

      function loadImage(src) {
        const img = new Image();
        img.onload = function () {
          context.drawImage(img, 0, 0, canvas.width, canvas.height);
          saveState();
        };
        img.src = src;
      }

      function setBackground() {
        context.fillStyle = currentColor;
        context.fillRect(0, 0, canvas.width, canvas.height);
        saveState();
      }

      function undo() {
        if (history.length > 0) {
          redoHistory.push(history.pop());
          const imgData = history[history.length - 1];
          const img = new Image();
          img.onload = function () {
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.drawImage(img, 0, 0);
          };
          img.src = imgData;
        }
      }

      function redo() {
        if (redoHistory.length > 0) {
          history.push(redoHistory.pop());
          const imgData = history[history.length - 1];
          const img = new Image();
          img.onload = function () {
            context.clearRect(0, 0, canvas.width, canvas.height);
            context.drawImage(img, 0, 0);
          };
          img.src = imgData;
        }
      }

      colorBoxes.forEach(box => {
        box.addEventListener('click', function () {
          currentColor = this.dataset.color;
        });
      });

      colorPicker.addEventListener('change', function () {
        currentColor = this.value;
      });

      image1.addEventListener('click', function () {
        loadImage('images/animal.png');
      });

      image2.addEventListener('click', function () {
        loadImage('images/Alpaca.png');
      });

      canvas.addEventListener('mousedown', startPosition);
      canvas.addEventListener('mouseup', endPosition);
      canvas.addEventListener('mousemove', draw);

      clearCanvasBtn.addEventListener('click', clearCanvas);
      saveCanvasBtn.addEventListener('click', saveCanvas);
      setBgColorBtn.addEventListener('click', setBackground);
      undoBtn.addEventListener('click', undo);
      redoBtn.addEventListener('click', redo);

      saveState();
    });
  </script>
</body>
</html>
